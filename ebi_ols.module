<?php
define('OLS_URL', 'http://www.ebi.ac.uk/ols/api/ontologies');

function ebi_ols_permission() {
  return array(
    'access obselete report' => array(
      'title' => t('Access obselete report'),
      'description' => t('Access report page of obselete terms.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ebi_ols_menu() {
  $items['admin/config/services/ebi_ols'] = array(
    'title' => 'EBI Ontology Lookup Service',
    'description' => 'Content with obsolete terms. ',
    'page callback' => 'ebi_ols_report',
    'page arguments' => array('transliteration_retroactive'),
    'access arguments' => array('access obselete report'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function ebi_ols_report() {
  $rows = array();
  $fields = array();
  $field_info = field_info_fields();
  foreach($field_info as $field) {
    foreach($field['bundles'] as $entity_type => $bundles){
      foreach($bundles as $bundle){
        $field_setting = field_info_instance($entity_type, $field['field_name'], $bundle);
        if ($field_setting['widget']['module'] == 'ebi_ols') {
          $storage = $field['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
          foreach($storage as $table=>$column) {
            $fields[] = array(
              'db_table' => $table,
              'db_col' => $column['value'],
              'ontology' => $field_setting['widget']['settings']['ontology'],
            );
          }
        }
      }
    }
  }
  foreach (array_unique($fields, SORT_REGULAR) as $check) {
    $request = drupal_http_request('http://www.ebi.ac.uk/ols/api/search?rows=10000&obsoletes=true&q=*&ontology=' . $check['ontology'] . '&type=class');
    if (json_decode($request->data)) {
      $terms = array();
      $data = json_decode($request->data);
      foreach ($data->response->docs as $index=>$doc) {
        $term[] = $doc->id;
      }
      $result = db_select($check['db_table'], 'f')
        ->fields('f')
        ->condition($check['db_col'], $term,'IN')
        ->execute();
      $header = array('Content', 'Obsolete terms');
      while($record = $result->fetchAssoc()) {
        $entity = l($record['entity_type'] . ' ' . $record['entity_id'], $record['entity_type'] . '/' . $record['entity_id']);
        $row =  array($entity, $record[$check['db_col']]);
        $rows[] = $row;
      }
    }
    else {
      drupal_set_message(t('EBI Ontology Lookup Service is not available. Please check http://www.ebi.ac.uk/ols/api.'), $type = 'error');
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Implements hook_field_widget_info().
 */
function ebi_ols_field_widget_info() {
  return array(
    'ebi_ols_textfield' => array(
      'label' => t('Ontology Lookup Service'),
      'field types' => array('text'),
      'settings' => array('ontology' => ''),
      'weight' => 2,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ebi_ols_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  $settings = $instance['widget']['settings'];
  $element += array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]) ? $items[$delta]['value'] : '',
    //'#size' => $instance['widget']['settings']['size'],
    '#element_validate' => array('ebi_ols_element_validate'),
    '#attributes' => array(
      'class' => array('ols-autocomplete'),
      'ontology' => array($settings['ontology']),
      'ancestor' => array($settings['ancestor']),
    ),
    '#suffix' => '</div>',
  );
  drupal_add_library('system', 'ui.autocomplete');
  drupal_add_js(drupal_get_path('module', 'ebi_ols') . '/ebi_ols.js');
  return array('value' => $element);
}

/**
 * Implements hook_field_widget_settings_form().
 */
function ebi_ols_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $options = array();
  $request = drupal_http_request(constant('OLS_URL') . '?size=10000000');
  if (json_decode($request->data)) {
    $data = json_decode($request->data);
    $ontologies = $data->_embedded->ontologies;
    foreach($ontologies as $ontology) {
      $options[$ontology->config->namespace] = $ontology->config->preferredPrefix . ': ' . $ontology->config->title;
    }
  }
  else {
    drupal_set_message(t('An error occurred with EBI Ontology Lookup Service.'), 'error');
  }
  $form['ontology'] = array(
    '#type' => 'select',
    '#title' => t('Ontology in OLS'),
    '#options' => $options,
    '#description' => t('Don\'t change it after you save settings. Otherwise the obelete report will not work properly. '),
    '#default_value' => $settings['ontology'],
    '#required' => TRUE,
    //'#weight' => 1,
  );
  $form['ancestor']= array(
    '#type' => 'textfield',
    '#title' => t('Ontology in OLS'),
    '#description' => t('You can restrict a search to all children of a given term, for example "EDAM Topic": http://edamontology.org/topic_0003. '),
    '#default_value' => $settings['ancestor'],
    '#required' => FALSE,
    //'#weight' => 2,
  );
  return $form;
}

/**
 * Implements hook_field_widget_error().
 */
function ebi_ols_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

function ebi_ols_element_validate($element, &$form_state, $form) {
  $value = $element['#value'];
  if ($value) {
    $pieces = explode(":", $value);
    $iri = $pieces[1] . ':' . $pieces[2];
    $ols_url = constant('OLS_URL') . '/' . $pieces[0] . '/terms/' . urlencode(urlencode($iri));
    $request = drupal_http_request($ols_url);
    if (json_decode($request->data)) {
      $data = json_decode($request->data);
      if (isset($data->error)) {
        drupal_add_library('system', 'ui.autocomplete');
        drupal_add_js(drupal_get_path('module', 'ebi_ols') . '/ebi_ols.js');
        form_set_error($element['#field_name'] . '][' . $element['#language'] . '][' . $element['#delta'], $message = t('Ontology error: ') . t($data->message));
      }
      elseif ($data->is_obsolete) {
        $message = $value . t(' is obsolete.');
        if (property_exists($data, 'annotation')) {
          $replace = '';
          if (property_exists($data->annotation, 'replacedBy')) {
            $replace = implode(",",  $data->annotation->replacedBy);
          }
          if ($replace != '') {
            $message .= ' Replaced by: ' . $replace;
          }
          $consider = '';
          if (property_exists($data->annotation, 'consider')) {
            $consider = implode(',',  $data->annotation->consider);
          }
        }
        if ($consider != '') {
          $message .= ' Please consider: ' . $consider;
        }
        form_set_error($element['#field_name'] . '][' . $element['#language'] . '][' . $element['#delta'], $message);
      }
    }
    else {
      form_set_error('field_edam', $message = t('An error occurred with EBI Ontology Lookup Service.'));
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ebi_ols_field_formatter_info() {
  return array(
    'ebi_ols_default' => array(
      'label' => t('EBI Ontology Lookup Service'),
      'description' => 'Display text field with Ontology Lookup Service.',
      'field types' => array('text'),
      'weight' => 2,
      'settings' => array(
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ebi_ols_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'ebi_ols_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'ebi_ols_formatter_default',
          '#item' => $item,
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function ebi_ols_theme() {
  $theme = array(
    'ebi_ols_formatter_default' => array(
      'variables' => array(
        'item' => NULL,
      ),
    ),
  );
  return $theme;
}

function theme_ebi_ols_formatter_default($variables) {
  if ($variables['item']['safe_value']) {
    $pieces = explode(":", $variables['item']['safe_value']);
    $iri = $pieces[1] . ':' . $pieces[2];
    $ols_url = constant('OLS_URL') . '/' . $pieces[0] . '/terms/' . urlencode(urlencode($iri));
    $options = array(
      'attributes' => array(
        'class'=> array('ebi_ols_formatter_default'),
        'ols_url' => array($ols_url),
      ),
    );
    drupal_add_library('system', 'ui.autocomplete');
    drupal_add_js(drupal_get_path('module', 'ebi_ols') . '/ebi_ols.js');
    return l($variables['item']['safe_value'], $iri, $options);
  }
}
